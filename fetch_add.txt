<codeblock>
T fetch_add(T operand, <a href='https://sites.google.com/site/cpprefjp/reference/atomic/memory_order'>memory_order</a> order = <a href='https://sites.google.com/site/cpprefjp/reference/atomic/memory_order'>memory_order_seq_cst</a>) volatile noexcept;
T fetch_add(T operand, <a href='https://sites.google.com/site/cpprefjp/reference/atomic/memory_order'>memory_order</a> order = <a href='https://sites.google.com/site/cpprefjp/reference/atomic/memory_order'>memory_order_seq_cst</a>) noexcept;
</codeblock>
<h2>概要</h2>
<b>加算を行う</b>

<h2>効果</h2>
<code>order</code>で指定されたメモリオーダーにしたがって、現在の値に<code>operandを加算した値</code>でアトミックに置き換える



<h2>戻り値</h2>
変更前の値が返される



<h2>例外</h2>
投げない


<h2>備考</h2>
この関数は、<code>atomic</code>クラスの整数型およびポインタに対する特殊化で定義される。


符号付き整数型に対しては、2の補数表現による演算が行われ、未定義動作はない。アドレス型に関しては結果として未定義アドレスになる場合があるが、それ以外の未定義動作はない。

<h2>例</h2>
<codeblock>
#include <iostream>
#include <atomic>

int main()
{
  std::atomic<int> x(3);

  int before = x.<color=000000>fetch_add</color>(2);

  std::cout << before << std::endl;
  std::cout << x.load() << std::endl;
}
</codeblock>
<h3>出力</h3>
<codeblock>
3
5
</codeblock>
<h2>バージョン</h2>
<h3>言語</h3>

<ul><li>C++11</li></ul>



<h3>処理系</h3><ul><li><a href='https://sites.google.com/site/cpprefjp/implementation#clang'>Clang</a>: ??</li><li><a href='https://sites.google.com/site/cpprefjp/implementation#gcc'>GCC</a>: </li><li><a href='https://sites.google.com/site/cpprefjp/implementation#gcc'>GCC, C++0x mode</a>: 4.7.0</li><li><a href='https://sites.google.com/site/cpprefjp/implementation#icc'>ICC</a>: ??</li><li><a href='https://sites.google.com/site/cpprefjp/implementation#visual_cpp'>Visual C++</a> ??</li></ul>



<h2>参照</h2>


